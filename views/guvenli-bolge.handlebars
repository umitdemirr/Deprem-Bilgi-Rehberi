<div class="safezone-page">
    <div class="container-fluid">
        <div class="row">
            <!-- Sol Taraf - Harita ve Bilgi Panelleri -->
            <div class="col-lg-9">
                <div class="card shadow-sm">
                    <div class="card-body p-0">
                        <div id="safeZoneMap" style="height: 90vh;">
                            <!-- Bilgi Paneli - Sol Alt -->
                            <div class="info-panels-container">
                                <!-- İstatistik Paneli -->
                                <div class="floating-stats-panel">
                                    <div class="stats-grid">
                                        <div class="stat-item">
                                            <i class="fas fa-map-marker-alt"></i>
                                            <div class="stat-info">
                                                <span class="stat-value">{{stats.totalAreas}}</span>
                                                <span class="stat-label">Alan</span>
                                            </div>
                                        </div>
                                        <div class="stat-item">
                                            <i class="fas fa-users"></i>
                                            <div class="stat-info">
                                                <span class="stat-value">{{stats.totalCapacity}}</span>
                                                <span class="stat-label">Kişi</span>
                                            </div>
                                        </div>
                                        <div class="stat-item">
                                            <i class="fas fa-city"></i>
                                            <div class="stat-info">
                                                <span class="stat-value">{{stats.cityCount}}</span>
                                                <span class="stat-label">Şehir</span>
                                            </div>
                                        </div>
                                        <div class="stat-item">
                                            <i class="fas fa-check-circle"></i>
                                            <div class="stat-info">
                                                <span class="stat-value">{{stats.activeAreas}}</span>
                                                <span class="stat-label">Aktif</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sağ Taraf - Filtreleme Paneli -->
            <div class="col-lg-3">
                <div class="filter-sidebar">
                    <div class="filter-card">
                        <div class="card-header">
                            <h5><i class="fas fa-filter"></i> Filtrele</h5>
                            <button class="btn btn-sm btn-outline-secondary" onclick="resetFilters()">
                                <i class="fas fa-undo"></i> Sıfırla
                            </button>
                        </div>
                        <div class="card-body">
                            <form id="filter-form">
                                <!-- Şehir Filtresi -->
                                <div class="filter-group">
                                    <label>Şehir</label>
                                    <select id="city-filter" class="form-select">
                                        <option value="">Tüm Şehirler</option>
                                        {{#each cities}}
                                        <option value="{{name}}">
                                            {{name}} ({{count}} toplanma alanı{{#if types.length}} - 
                                            {{#each types}}
                                                {{#if (eq type "active")}}
                                                    Aktif: {{count}}
                                                {{else if (eq type "temporary")}}
                                                    Geçici: {{count}}
                                                {{else}}
                                                    {{type}}: {{count}}
                                                {{/if}}
                                                {{#unless @last}}, {{/unless}}
                                            {{/each}}
                                            {{/if}})
                                        </option>
                                        {{/each}}
                                    </select>
                                </div>

                                <!-- İlçe Filtresi -->
                                <div class="filter-group">
                                    <label>İlçe</label>
                                    <select id="district-filter" class="form-select" disabled>
                                        <option value="">Önce Şehir Seçin</option>
                                    </select>
                                </div>

                                <!-- Tip Filtresi -->
                                <div class="filter-group">
                                    <label>Tür</label>
                                    <div class="type-buttons">
                                        <button type="button" class="btn btn-sm btn-outline-primary type-filter active" data-type="all">
                                            Tümü
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-primary type-filter" data-type="active">
                                            Aktif
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-primary type-filter" data-type="temporary">
                                            Geçici
                                        </button>
                                    </div>
                                </div>

                                <!-- Filtreleme Özeti -->
                                <div class="filter-summary mt-3">
                                    <div class="alert alert-info py-2">
                                        <small>
                                            <i class="fas fa-info-circle"></i>
                                            Gösterilen: <strong><span class="shown-count">0</span></strong> / 
                                            Toplam: <strong><span class="total-count">0</span></strong>
                                        </small>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Sağ Panel Stilleri */
.filter-sidebar {
    height: 90vh;
    overflow-y: auto;
    padding: 15px;
    background: var(--light);
    border-left: 1px solid rgba(0,0,0,0.1);
}

.filter-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.filter-card .card-header {
    padding: 15px;
    border-bottom: 1px solid rgba(0,0,0,0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.filter-card .card-header h5 {
    margin: 0;
    font-size: 1rem;
    color: var(--primary-dark);
}

.filter-card .card-body {
    padding: 15px;
}

.filter-group {
    margin-bottom: 15px;
}

.filter-group label {
    display: block;
    margin-bottom: 5px;
    font-size: 0.9rem;
    color: #666;
}

.filter-group .form-select {
    font-size: 0.9rem;
}

.capacity-slider {
    padding: 10px 0;
}

.filter-summary .alert {
    margin: 0;
}

/* Dark mode uyumluluğu */
[data-theme="dark"] .filter-sidebar {
    background: var(--dark-bg);
    border-color: rgba(255,255,255,0.1);
}

[data-theme="dark"] .filter-card {
    background: #2d3436;
}

[data-theme="dark"] .filter-card .card-header {
    border-color: rgba(255,255,255,0.1);
}

[data-theme="dark"] .filter-group label {
    color: #bdc3c7;
}

/* Responsive tasarım */
@media (max-width: 992px) {
    .filter-sidebar {
        height: auto;
        border-left: none;
        border-top: 1px solid rgba(0,0,0,0.1);
        margin-top: 15px;
    }
}

/* Info Panels Container */
.info-panels-container {
    position: absolute;
    bottom: 20px;
    left: 20px;
    z-index: 1000;
    display: flex;
    gap: 10px;
}

/* İstatistik Paneli */
.floating-stats-panel {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 15px;
}

.stat-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 5px;
}

.stat-item i {
    font-size: 1.2rem;
    color: var(--primary);
}

.stat-info {
    display: flex;
    flex-direction: column;
}

.stat-value {
    font-weight: bold;
    font-size: 1.1rem;
    color: var(--primary-dark);
}

.stat-label {
    font-size: 0.8rem;
    color: #666;
}

/* Bilgi Paneli */
.floating-info-panel {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.legend-items {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 5px;
    font-size: 0.9rem;
}

/* Dark mode uyumluluğu */
[data-theme="dark"] .floating-stats-panel,
[data-theme="dark"] .floating-info-panel {
    background: rgba(45, 52, 54, 0.9);
}

[data-theme="dark"] .stat-value {
    color: #fff;
}

[data-theme="dark"] .stat-label {
    color: #bdc3c7;
}

/* Responsive tasarım */
@media (max-width: 768px) {
    .info-panels-container {
        flex-direction: column;
        left: 10px;
        bottom: 10px;
        max-width: calc(100% - 20px);
    }

    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .legend-items {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
// Harita ve marker değişkenleri
let map;
let safeZoneMarkers = [];
let earthquakeCircle;

// Marker cluster group'u oluştur
let markerCluster;

// Filtreleme durumu
let filterState = {
    city: '',
    district: '',
    type: 'all'
};

// Güvenli bölge verilerini al
const safeZones = {{{safeZones}}};

document.addEventListener('DOMContentLoaded', function() {
    // Haritayı başlat
    map = L.map('safeZoneMap').setView([39.9334, 32.8597], 6);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    // Marker'ları ekle
    initializeMarkers();
    
    // Filtreleme işlemlerini başlat
    setupFilters();
    
    // Kullanıcı konumunu al
    getUserLocation();
});

function initializeMarkers() {
    // MarkerClusterGroup oluştur
    markerCluster = L.markerClusterGroup({
        showCoverageOnHover: false,
        spiderfyOnMaxZoom: true,
        disableClusteringAtZoom: 19,
        maxClusterRadius: 50,
        iconCreateFunction: function(cluster) {
            const count = cluster.getChildCount();
            let size, className;
            
            // Marker sayısına göre boyut ve renk belirleme
            if (count < 10) {
                size = 'small';
                className = 'marker-cluster-small';
            } else if (count < 100) {
                size = 'medium';
                className = 'marker-cluster-medium';
            } else {
                size = 'large';
                className = 'marker-cluster-large';
            }
            
            return L.divIcon({
                html: `<div><span>${count}</span></div>`,
                className: `marker-cluster ${className}`,
                iconSize: L.point(40, 40)
            });
        }
    });

    // Marker'ları ekle
    safeZones.forEach(zone => {
        const marker = L.marker([zone.location.coordinates[1], zone.location.coordinates[0]], {
            icon: L.divIcon({
                className: `safe-zone-marker ${zone.type}`,
                html: '<div class="marker-content"></div>',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            })
        });
        
        const popupContent = `
            <div class="safe-zone-popup">
                <h6>${zone.name}</h6>
                <p><i class="fas fa-city"></i> ${zone.city}</p>
                <p><i class="fas fa-map-marker-alt"></i> ${zone.district}</p>
                <p><i class="fas fa-users"></i> ${zone.capacity} kişi</p>
                <p><i class="fas fa-info-circle"></i> ${zone.type}</p>
            </div>
        `;
        
        marker.bindPopup(popupContent);
        markerCluster.addLayer(marker);
        safeZoneMarkers.push({
            marker: marker,
            data: zone
        });
    });

    // Cluster'ı haritaya ekle
    map.addLayer(markerCluster);
}

function setupFilters() {
    const citySelect = document.getElementById('city-filter');
    const districtSelect = document.getElementById('district-filter');
    const typeButtons = document.querySelectorAll('.type-filter');

    // İlk yüklemede filtreleme özetini göster
    updateFilterSummary(safeZoneMarkers.length);

    // Şehir değişikliği
    citySelect.addEventListener('change', function() {
        const cityName = this.value;
        filterState.city = cityName;
        
        if (!cityName) {
            districtSelect.disabled = true;
            districtSelect.innerHTML = '<option value="">Önce Şehir Seçin</option>';
            filterState.district = '';
        } else {
            districtSelect.disabled = false;
            loadDistricts(cityName);
        }
        
        applyFilters();
    });

    // İlçe değişikliği
    districtSelect.addEventListener('change', function() {
        filterState.district = this.value;
        applyFilters();
    });

    // Tür filtreleme
    typeButtons.forEach(button => {
        button.addEventListener('click', function() {
            typeButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            filterState.type = this.dataset.type;
            applyFilters();
        });
    });
}

function loadDistricts(cityName) {
    const districtSelect = document.getElementById('district-filter');
    districtSelect.innerHTML = '<option value="">Yükleniyor...</option>';

    fetch(`/api/districts/${encodeURIComponent(cityName)}`)
        .then(response => response.json())
        .then(districts => {
            districtSelect.innerHTML = '<option value="">Tüm İlçeler</option>';
            districts.forEach(district => {
                const option = document.createElement('option');
                option.value = district.name;
                option.textContent = `${district.name} (${district.count} alan)`;
                districtSelect.appendChild(option);
            });
        })
        .catch(error => {
            console.error('İlçeler yüklenirken hata:', error);
            districtSelect.innerHTML = '<option value="">Hata oluştu</option>';
        });
}

function applyFilters() {
    markerCluster.clearLayers();
    
    const filteredMarkers = safeZoneMarkers.filter(item => {
        const cityMatch = !filterState.city || item.data.city === filterState.city;
        const districtMatch = !filterState.district || item.data.district === filterState.district;
        const typeMatch = filterState.type === 'all' || item.data.type === filterState.type;

        return cityMatch && districtMatch && typeMatch;
    });

    filteredMarkers.forEach(item => {
        markerCluster.addLayer(item.marker);
    });

    updateFilterSummary(filteredMarkers.length);

    // Haritayı filtrelenmiş alana odakla
    if (filteredMarkers.length > 0) {
        const bounds = L.featureGroup(filteredMarkers.map(m => m.marker)).getBounds();
        map.fitBounds(bounds, { padding: [50, 50] });
    }
}

function getUserLocation() {
    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(function(position) {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;

            L.marker([userLat, userLng], {
                icon: L.divIcon({
                    className: 'user-location-marker',
                    html: '<i class="fas fa-location-arrow"></i>'
                })
            }).addTo(map)
            .bindPopup('Konumunuz')
            .openPopup();

            map.setView([userLat, userLng], 12);
        });
    }
}
function updateFilterSummary(shownCount) {
    document.querySelector('.shown-count').textContent = shownCount;
    document.querySelector('.total-count').textContent = safeZoneMarkers.length;
}

function resetFilters() {
    const citySelect = document.getElementById('city-filter');
    const districtSelect = document.getElementById('district-filter');
    const typeButtons = document.querySelectorAll('.type-filter');

    // Form elemanlarını sıfırla
    citySelect.value = '';
    districtSelect.innerHTML = '<option value="">Önce Şehir Seçin</option>';
    districtSelect.disabled = true;
    
    // Tür butonlarını sıfırla
    typeButtons.forEach(btn => btn.classList.remove('active'));
    document.querySelector('[data-type="all"]').classList.add('active');

    // Filtreleme durumunu sıfırla
    filterState = {
        city: '',
        district: '',
        type: 'all'
    };

    // Tüm marker'ları göster
    markerCluster.clearLayers();
    safeZoneMarkers.forEach(item => {
        markerCluster.addLayer(item.marker);
    });

    updateFilterSummary(safeZoneMarkers.length);
}

// Form submit olayını da güncelleyelim
document.getElementById('filter-form').onsubmit = function(e) {
    e.preventDefault();
    applyFilters();
};
</script> 